"""
Django settings for mindful_journey_backend project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from cryptography.fernet import Fernet, MultiFernet # For encryption key handling

# Load environment variables from .env file in the base directory
load_dotenv(os.path.join(Path(__file__).resolve().parent.parent, '.env'))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-default-key-for-dev')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS_STRING = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STRING.split(',') if host.strip()]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken', # Required by dj-rest-auth for token auth
    'dj_rest_auth',
    'django.contrib.sites', # Required by dj-rest-auth
    'allauth', # Required by dj-rest-auth
    'allauth.account', # Required by dj-rest-auth
    'allauth.socialaccount', # Optional, if you want social login later
    'dj_rest_auth.registration', # For registration endpoints
    'corsheaders', # For handling Cross-Origin Resource Sharing
    'fernet_fields', # For encrypting model fields

    # Local apps
    'api',
]

SITE_ID = 1 # Required by django.contrib.sites / allauth

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # Must be high up, especially before CommonMiddleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', # Required by allauth
]

ROOT_URLCONF = 'mindful_journey_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mindful_journey_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DB_NAME = os.getenv('DB_NAME', 'mindful_journey_db')
DB_USER = os.getenv('DB_USER', 'user')
DB_PASSWORD = os.getenv('DB_PASSWORD', 'password')
DB_HOST = os.getenv('DB_HOST', 'localhost')
DB_PORT = os.getenv('DB_PORT', '5432')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
         # Recommended: Enable pgcrypto extension in PostgreSQL
         # You might need to run 'CREATE EXTENSION IF NOT EXISTS pgcrypto;' in your DB
        'OPTIONS': {},
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles_collected' # Define for collectstatic

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # Use JWT authentication provided by dj-rest-auth/simplejwt
        'rest_framework_simplejwt.authentication.JWTAuthentication',
         # SessionAuthentication allows login via Django admin and browsable API
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# dj-rest-auth settings
REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_HTTPONLY': False, # Allow JS access to refresh token for frontend renewal
    'JWT_AUTH_COOKIE': None, # Set to 'mindful-journey-auth' if using cookies for access token
    'JWT_AUTH_REFRESH_COOKIE': None, # Set to 'mindful-journey-refresh-token' if using cookies for refresh token
    # If JWT_AUTH_HTTPONLY is True, set cookies:
    # 'JWT_AUTH_COOKIE': 'mindful-journey-auth',
    # 'JWT_AUTH_REFRESH_COOKIE': 'mindful-journey-refresh-token',
    # 'JWT_AUTH_SAMESITE': 'Lax', # Or 'Strict' or 'None' (requires Secure=True)
    'USER_DETAILS_SERIALIZER': 'api.serializers.CurrentUserSerializer', # Custom user details serializer
    'REGISTER_SERIALIZER': 'api.serializers.CustomRegisterSerializer', # Custom registration serializer
}

# Allauth settings (required by dj-rest-auth)
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False # Use email as the primary identifier
ACCOUNT_EMAIL_VERIFICATION = 'none' # 'mandatory' is recommended for production, requires email setup
# If ACCOUNT_EMAIL_VERIFICATION is 'mandatory', set up email backend:
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # For dev testing
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # For production
# EMAIL_HOST = 'smtp.example.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@example.com'
# EMAIL_HOST_PASSWORD = 'your-email-password'
# DEFAULT_FROM_EMAIL = 'webmaster@localhost'


# Simple JWT settings (used by dj-rest-auth)
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # Adjust as needed
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),    # Adjust as needed
    'ROTATE_REFRESH_TOKENS': True, # Issue new refresh token on refresh
    'BLACKLIST_AFTER_ROTATION': True, # Blacklist old refresh token
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    origin.strip() for origin in os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:9002').split(',') if origin.strip()
]
CORS_ALLOW_CREDENTIALS = True # Important for cookies (like JWT refresh tokens)

# CSRF settings (Needed if SessionAuthentication is used, e.g., for browsable API/admin)
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS # Trust the frontend origin for CSRF


# Password Hashing - Django 4.x defaults to PBKDF2, Argon2 is optional but good
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]

# --- Security Settings for Production (HTTPS) ---

# Ensure these are set correctly when deploying behind a reverse proxy (like Nginx or Apache)
# that handles TLS/SSL termination.
USE_X_FORWARDED_HOST = os.getenv('USE_X_FORWARDED_HOST', 'False') == 'True'
SECURE_PROXY_SSL_HEADER_NAME = os.getenv('SECURE_PROXY_SSL_HEADER_NAME', None) # e.g., 'HTTP_X_FORWARDED_PROTO'
SECURE_PROXY_SSL_HEADER_VALUE = os.getenv('SECURE_PROXY_SSL_HEADER_VALUE', None) # e.g., 'https'

if not DEBUG:
    # Basic HTTPS settings if Django serves directly (uncommon in production)
    # or if proxy doesn't set the header reliably.
    # It's STRONGLY recommended to handle SSL termination at the proxy level.
    SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', 'True') == 'True'
    SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'True') == 'True'
    CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE', 'True') == 'True'

    # If using proxy headers, set these
    if USE_X_FORWARDED_HOST and SECURE_PROXY_SSL_HEADER_NAME and SECURE_PROXY_SSL_HEADER_VALUE:
        SECURE_PROXY_SSL_HEADER = (SECURE_PROXY_SSL_HEADER_NAME, SECURE_PROXY_SSL_HEADER_VALUE)
        # SECURE_SSL_REDIRECT might still be needed depending on proxy setup
        # Ensure the proxy correctly forwards the protocol header

    # HSTS (HTTP Strict Transport Security) - Recommended for production
    # Tells browsers to always connect via HTTPS for the specified duration.
    # Start with a small value (e.g., 3600 = 1 hour) and increase once confirmed working.
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', 0)) # e.g., 31536000 = 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = os.getenv('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'False') == 'True'
    SECURE_HSTS_PRELOAD = os.getenv('SECURE_HSTS_PRELOAD', 'False') == 'True'

    # Content Security Policy (CSP) - Highly Recommended (Requires careful configuration)
    # Define sources for scripts, styles, images, etc.
    # Example (needs customization):
    # CSP_DEFAULT_SRC = ("'self'",)
    # CSP_SCRIPT_SRC = ("'self'", 'trusted-cdn.com')
    # CSP_STYLE_SRC = ("'self'", "'unsafe-inline'") # Be careful with 'unsafe-inline'
    # MIDDLEWARE.insert(MIDDLEWARE.index('django.middleware.security.SecurityMiddleware') + 1, 'csp.middleware.CSPMiddleware')


# --- Field Encryption Settings ---
# Get the primary encryption key from environment variables
field_encryption_key_str = os.getenv('FIELD_ENCRYPTION_KEY')
if not field_encryption_key_str:
    print("WARNING: FIELD_ENCRYPTION_KEY environment variable not set. Field encryption will not work.")
    # Define a dummy key for development/testing if absolutely needed, but avoid in production
    # FIELD_ENCRYPTION_KEYS = [Fernet.generate_key()]
    FIELD_ENCRYPTION_KEYS = [] # Better to fail loudly if key is missing
elif not DEBUG:
    # In production, use the key directly
    try:
        # Ensure the key is bytes
        field_encryption_key_bytes = field_encryption_key_str.encode('utf-8')
        # Validate the key format (basic check)
        Fernet(field_encryption_key_bytes)
        FIELD_ENCRYPTION_KEYS = [field_encryption_key_bytes]
    except (ValueError, TypeError) as e:
         print(f"ERROR: Invalid FIELD_ENCRYPTION_KEY format: {e}. Ensure it's a valid Base64 encoded Fernet key.")
         FIELD_ENCRYPTION_KEYS = [] # Fail if key is invalid
else:
     # Allow potentially less secure key handling in DEBUG mode (for ease of setup)
     field_encryption_key_bytes = field_encryption_key_str.encode('utf-8')
     FIELD_ENCRYPTION_KEYS = [field_encryption_key_bytes]

# Optional: Support key rotation using MultiFernet
# fernet_keys_str = os.getenv('FIELD_ENCRYPTION_KEYS_CSV', '')
# if fernet_keys_str:
#     keys = [key.strip().encode('utf-8') for key in fernet_keys_str.split(',')]
#     if keys:
#         FIELD_ENCRYPTION_KEYS = keys # Uses the first key for encryption, all for decryption

# Note: You MUST keep your encryption keys secure and backed up. Losing the key means losing the data.

# --- Logging Configuration (Example) ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING', # Adjust level for production (INFO or WARNING)
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'), # Control Django's logging level
            'propagate': False,
        },
         'api': { # Example: logger for your 'api' app
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}
